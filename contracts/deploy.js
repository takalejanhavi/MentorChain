const { ethers } = require('ethers');
const fs = require('fs');
require('dotenv').config();

// Contract compilation result (you would get this from Hardhat or similar)
const CONTRACT_BYTECODE = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061001f565b610c8f8061002e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146101045780639d76ea5814610122578063f2fde38b14610152578063f5c9d69e1461016e57610088565b80630d8e6e2c1461008d5780632b68b9c6146100ab5780634ed3885e146100c75780636c0360eb146100e3575b600080fd5b61009561018a565b6040516100a29190610a1c565b60405180910390f35b6100c560048036038101906100c09190610ad7565b6101c7565b005b6100e160048036038101906100dc9190610ad7565b610350565b005b6100fd60048036038101906100f89190610b23565b6104d9565b6040516101019190610a1c565b60405180910390f35b61010c610579565b6040516101199190610b5f565b60405180910390f35b61013c60048036038101906101379190610b23565b61059d565b6040516101499190610b8a565b60405180910390f35b61016c60048036038101906101679190610b23565b6105e1565b005b61018860048036038101906101839190610ad7565b6106d4565b005b60606040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250905090565b600082829050116102135760405162461bcd60e51b815260040161020a90610c1e565b60405180910390fd5b600081819050116102595760405162461bcd60e51b815260040161025090610c8a565b60405180910390fd5b6001600033815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610295929190610857565b506040518060800160405280848152602001838152602001428152602001600115158152506002600085815260200190815260200160002060008201518160000190805190602001906102e9929190610857565b5060208201518160010190805190602001906102f6929190610857565b506040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050336040518060400160405280858152602001848152506040516103479190610d1c565b60405180910390a3505050565b600082829050116103965760405162461bcd60e51b815260040161038d90610c1e565b60405180910390fd5b6000818190501161038c5760405162461bcd60e51b815260040161038390610c8a565b60405180910390fd5b6001600033815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610388929190610857565b506040518060800160405280848152602001838152602001428152602001600115158152506002600085815260200190815260200160002060008201518160000190805190602001906103dc929190610857565b5060208201518160010190805190602001906103e9929190610857565b506040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050336040518060400160405280858152602001848152506040516104399190610d1c565b60405180910390a3505050565b60606001600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561056d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610523575b50505050509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002600083815260200190815260200160002060030160009054906101000a900460ff169050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066f5760405162461bcd60e51b815260040161066690610d88565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106df5760405162461bcd60e51b81526004016106d690610df4565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082829050116107205760405162461bcd60e51b815260040161071790610c1e565b60405180910390fd5b6000818190501161076c5760405162461bcd60e51b815260040161076390610c8a565b60405180910390fd5b6001600033815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610768929190610857565b506040518060800160405280848152602001838152602001428152602001600115158152506002600085815260200190815260200160002060008201518160000190805190602001906107bc929190610857565b5060208201518160010190805190602001906107c9929190610857565b506040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050336040518060400160405280858152602001848152506040516108199190610d1c565b60405180910390a3505050565b828054610832906108b5565b90600052602060002090601f016020900481019282610854576000855561089b565b82601f1061086d57805160ff191683800117855561089b565b8280016001018555821561089b579182015b8281111561089a57825182559160200191906001019061087f565b5b5090506108a891906108ac565b5090565b5b808211156108c55760008160009055506001016108ad565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061090d57602002820191505b6020821081141561092157610920610896565b5b50919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561096157808201518184015260208101905061094657565b83811115610970576000848401525b50505050565b6000610981826109f7565b61098b8185610a02565b935061099b818560208601610943565b6109a481610a13565b840191505092915050565b60006109ba826109f7565b6109c48185610a02565b93506109d4818560208601610943565b6109dd81610a13565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000610a0f826109e8565b610a1981856109f3565b9350610a29818560208601610943565b610a3281610a13565b840191505092915050565b6000602082019050818103600083015261a057818461a004565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ab582610a13565b810181811067ffffffffffffffff82111715610ad457610ad3610a7c565b5b80604052505050565b6000610ae7610a5f565b9050610af38282610aab565b919050565b600067ffffffffffffffff821115610b1357610b12610a7c565b5b610b1c82610a13565b9050602081019050919050565b600082825260208201905092915050565b6000610b4d610b4884610af8565b610add565b905082815260208101848484011115610b6957610b68610a77565b5b610b74848285610943565b509392505050565b600082601f830112610b9157610b90610a72565b5b8135610ba1848260208601610b3a565b91505092915050565b60008060408385031215610bc157610bc0610a69565b5b600083013567ffffffffffffffff811115610bdf57610bde610a6e565b5b610beb85828601610b7c565b925050602083013567ffffffffffffffff811115610c0c57610c0b610a6e565b5b610c1885828601610b7c565b9150509250929050565b7f434944206361616e6e6f7420626520656d70747900000000000000000000000000600082015250565b6000610c58601483610a02565b9150610c6382610c22565b602082019050919050565b60006020820190508181036000830152610c8781610c4b565b9050919050565b7f5265706f72742068617368206361616e6e6f7420626520656d70747900000000600082015250565b6000610cc4601c83610a02565b9150610ccf82610c8e565b602082019050919050565b60006020820190508181036000830152610cf381610cb7565b9050919050565b6000610d05826109e8565b610d0f81856109f3565b9350610d1f818560208601610943565b80840191505092915050565b6000610d378284610cfa565b915081905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f600082015250565b6000610d78602083610a02565b9150610d8382610d42565b602082019050919050565b60006020820190508181036000830152610da781610d6b565b9050919050565b7f4e6577206f776e65722063616e6e6f74206265207a65726f2061646472657373600082015250565b6000610de4602083610a02565b9150610def82610dae565b602082019050919050565b60006020820190508181036000830152610e1381610dd7565b905091905056fea2646970667358221220a8c4e9c5d2f1b3a7e6d8c9b4a5f2e1d0c3b6a9f8e7d4c1b0a3f6e9d2c5b8a1f4e763736f6c63430008130033";

async function deployContract() {
  try {
    console.log('üöÄ Deploying CareerReports contract to Polygon Mumbai...');

    // Initialize provider and wallet
    const provider = new ethers.JsonRpcProvider(process.env.MUMBAI_RPC_URL);
    const wallet = new ethers.Wallet(process.env.DEPLOYER_PRIVATE_KEY, provider);

    console.log(`üìù Deploying from address: ${wallet.address}`);

    // Check balance
    const balance = await provider.getBalance(wallet.address);
    console.log(`üí∞ Wallet balance: ${ethers.formatEther(balance)} MATIC`);

    if (balance < ethers.parseEther('0.01')) {
      throw new Error('Insufficient MATIC balance for deployment');
    }

    // Create contract factory
    const contractFactory = new ethers.ContractFactory(
      CONTRACT_ABI,
      CONTRACT_BYTECODE,
      wallet
    );

    // Deploy contract
    const contract = await contractFactory.deploy({
      gasLimit: 2000000,
      gasPrice: ethers.parseUnits('30', 'gwei')
    });

    console.log(`‚è≥ Contract deployment transaction: ${contract.deploymentTransaction().hash}`);

    // Wait for deployment
    await contract.waitForDeployment();
    const contractAddress = await contract.getAddress();

    console.log(`‚úÖ Contract deployed successfully!`);
    console.log(`üìç Contract address: ${contractAddress}`);
    console.log(`üîó Mumbai Explorer: https://mumbai.polygonscan.com/address/${contractAddress}`);

    // Update .env file
    const envContent = fs.readFileSync('.env', 'utf8');
    const updatedEnv = envContent.replace(
      /CONTRACT_ADDRESS=.*/,
      `CONTRACT_ADDRESS=${contractAddress}`
    );
    fs.writeFileSync('.env', updatedEnv);

    console.log('üìù Updated .env file with contract address');

    return contractAddress;

  } catch (error) {
    console.error('‚ùå Deployment failed:', error);
    throw error;
  }
}

// Contract ABI for reference
const CONTRACT_ABI = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {"indexed": true, "internalType": "address", "name": "student", "type": "address"},
      {"indexed": false, "internalType": "string", "name": "cid", "type": "string"},
      {"indexed": false, "internalType": "string", "name": "reportHash", "type": "string"},
      {"indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256"}
    ],
    "name": "ReportStored",
    "type": "event"
  },
  {
    "inputs": [
      {"internalType": "string", "name": "cid", "type": "string"},
      {"internalType": "string", "name": "reportHash", "type": "string"}
    ],
    "name": "storeReport",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {"internalType": "address", "name": "student", "type": "address"}
    ],
    "name": "getStudentReports",
    "outputs": [
      {"internalType": "string[]", "name": "", "type": "string[]"}
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {"internalType": "string", "name": "cid", "type": "string"},
      {"internalType": "string", "name": "reportHash", "type": "string"}
    ],
    "name": "verifyReport",
    "outputs": [
      {"internalType": "bool", "name": "", "type": "bool"}
    ],
    "stateMutability": "view",
    "type": "function"
  }
];

if (require.main === module) {
  deployContract()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

module.exports = { deployContract, CONTRACT_ABI };